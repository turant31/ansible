Erstellen einer verschlüsselten Datei
$ ansible-vault create vaulted_vars.yml

Editieren einer verschlüsselten Datei
$ ansible-vault edit vaulted_vars.yml

Ändern des Passworts einer verschlüsselten Datei
$ ansible-vault rekey vaulted_vars.yml

Verschlüsseln/Encrypten einer bereits vorhandenen Datei
$ ansible-vault encrypt vaulted_neueDatei.yml

Entschlüsseln/Decrypten einer verschlüsseltene Datei
$ ansible-vault decrypt vaulted_vars.yml

Sehen einer verschlüsselten Datei, ohne bearbeiten zu können
$ ansible-vault view vaulted_vars.yml


Playbook ausführen mit verschlüsselter Datei (mit Passwort-Eingabe)
$ ansible-playbook --ask-vault-pass site.yml

Playbook ausführen mit verschlüsselter Datei (ohne Passwort-Eingabe)
$ ansible-playbook --vault-password-file my-vault-password.py

__________________________________________

Ausführen eines Playbooks mit einer ausgewählten Inventory und weiteren Abfragen siehe unten:
Beispiel:
ansible-master@ip-172-31-82-153:~/ansible 
$ ansible-playbook -i slave-inventory encrypted_playbook-09.yml --ask-vault-pass -kK

--ask-vault-password=Vault password
--ask-become-password= Sudo password (oder stattdessen -K)
-k = SSH password
__________________________________________

Ausführen eines Playbooks mit einer ausgewählten Inventory:
worin eine variable in verschlüsselt in einer anderen yml-Datei eingefügt wird für z.B. sensible Passwörter, hier sudo.
1. vi slave_inventory.yml --> ansible_become=yes ansible_become_method=sudo ansible_become_pass='{{my_cluster_sudo_pass}}' einfügen.
2. vi sudo_pass.yml das my_cluter_sudo_pass='HIERSTEHTDASPASSWORT' einfügen.
3. Für Ausführen dann: ansible-playbook -i slave-inventory playbook-09.yml --ask-vault-pass --extra-vars '@sudo_pass.yml'



